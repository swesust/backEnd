
from swe import models
from django.core.exceptions import ObjectDoesNotExist


from django.core.files.storage import FileSystemStorage as FSS
from io import BytesIO
from PIL import Image as ImageProcess
from time import time
from os import remove, makedirs
from os.path import isdir

class Image():
	"""
		storing display images of profiles. 
		root location : data/
	"""
	def save(loc, bytesdata):
		"""
			to save user display image
			>>helper.Image.save(Student object, image bytes file)
			>>helper.Image.save(Teacher object, image bytes file)
			User Type:
				0 = Student
				1 = Teacher
			this image will save in : 
			students: /data/students/batch/regid/image.jpg
			teachers: /data/teachers/hid/image.jpg
			# here hid = 8 length hash code generated by teacher email id

			to show the image on html templates: <img src="/{{ user.imgsrc }}">

			image will rename with current millisecond.type

		"""
		img,ext = Image.process(bytesdata)
		# save the image
		f = FSS(location = loc)


		filename = str(int(time()*1000000))
		filename = filename+'.'+ext

		# make sure the dir already exist or not
		if isdir(f.location) == False:
			makedirs(f.location)


		# # if a previous image is available then delete the previous one first
		# if len(user.imgsrc) != 0:
		# 	remove(user.imgsrc)

		# save in storage 
		img.save(f.location+'/'+filename, format=ext, quality=90)

		# return the storage location
		return loc+'/'+filename


	def delete(loc):
		try:
			remove(loc)
			return True
		except Exception as e:
			return False
	def process(bytesdata):
		"""
			retrieve the image file from bytes and resize (1000*x)
		"""
		img = ImageProcess.open(BytesIO(bytesdata))
		size = img.size
		height = int(float(1000*size[1])/size[0])
		return img.resize((1000,height)), img.format


	def isValidFormat(filename):
		"""
			required image format: .JPG, .PNG, .JPEG
		"""
		# transform the string to lower character
		filename = filename.lower()
		# get the last dot index
		dotindex = filename.rfind('.')
		# check whether the file has any dot or extenstion
		if dotindex != -1:
			# split the file extension
			extension = filename[dotindex:len(filename)]
			# check valid extensions
			if extension == '.jpg':
				return True
			elif extension == '.png':
				return True
			elif extension == '.jpeg':
				return True
		
		return False


from json import load as jsonload, dump as jsonwrite

class Content():

	# static keys to store data and retrieve them
	keys = ["bio", "interest", "programming language", "skill", 
			"projects", "codeforeces", "uhunt", "vjudge"]

	#templete = 'data/demo.json'
	def create(regid):
		"""
		by invoke this method a json file will created for this user 
		and return the location

		"""
		batch = regid[:4]
		fol = FSS(location = 'data')
		loc = 'data/students/'+batch+'/'+regid
		with open(fol.location+'/content_demo.json', 'r') as read_file:
			data = jsonload(read_file)
			userfol = FSS(location = loc)

			with open(userfol.location+'/content.json', 'w') as write_file:
				jsonwrite(data, write_file)
				return True

		return False


	def add(regid, key, value):
		batch = regid[:4]
		fol = FSS(location='data/students/'+batch+'/'+regid)
		with open(fol.location+'/content.json', 'r') as read_file:
			data = jsonload(read_file)
			try:
				data[key].append(value)
				with open(fol.location+'/content.json', 'w') as write_file:
					jsonwrite(data, write_file)
					return True
			except KeyError as e:
				return False

		return False


	def replace(regid, key, value):
		batch = regid[:4]
		fol = FSS(location='data/students/'+batch+'/'+regid)
		with open(fol.location+'/content.json', 'r') as read_file:
			data = jsonload(read_file)
			try:
				data[key] = value
				with open(fol.location+'/content.json', 'w') as write_file:
					jsonwrite(data, write_file)
					return True
			except KeyError as e:
				return False

		return False


	def remove(regid, key, index):
		batch = regid[:4]
		fol = FSS(location='data/students/'+batch+'/'+regid)
		with open(fol.location+'/content.json', 'r') as read_file:
			data = jsonload(read_file)
			try:
				del(data[key][index])
				with open(fol.location+'/content.json', 'w') as write_file:
					jsonwrite(data, write_file)
					return True
			except KeyError as e:
				return False

		return False


from hashlib import md5
class Token():

	def get_token(userid, hashed_password):
		hash_token = md5(hashed_password.encode()).hexdigest()
		return hash_token[0:16] + userid + hash_token[16:32]


	def get_userid(token):
		try:
			# remove first 16 char
			userid = token[16:len(token)]
			# remove last 16 char
			return userid[0:-16]
		except Exception as e:
			return None

	def is_valid(token):
		try:
			h1 = token[0:16]

			userid = Token.get_userid(token)

			# split last 16 chars
			h2 = token[-16:]

			encode_password = h1+h2

			try:
				user = models.AuthUser.objects.get(userid=userid)
				hashed_password = md5(user.password.encode()).hexdigest()

				if encode_password != hashed_password:
					return False
				return True
			except ObjectDoesNotExist as e:
				return False
			
		except Exception as e:
			return False
