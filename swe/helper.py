from hashlib import sha256, sha1
from uuid import uuid4

class HashPass():
	"""
		Password hashing, random hash value and password validation checking
	"""
	def halfmirror(password):
		l = len(password)
		m = int(l/2)
		return password[m:l]+password[:m]

	def generate(password):
		password = HashPass.halfmirror(password)
		hashrand = uuid4().hex
		return sha256(hashrand.encode()+password.encode()).hexdigest(),hashrand

	def isValid(userpass, hashpass, hashrand):
		userpass = HashPass.halfmirror(userpass)
		userhash = sha256(hashrand.encode()+userpass.encode()).hexdigest()
		if userhash == hashpass:
			return True
		else:
			return False




from swe import models
from django.core.exceptions import ObjectDoesNotExist

class Auth():
	"""
		This class contains two function for authentication
		* student authentication: checking student login validation
		* teacher authentication: checking teacher login validation
	"""
	def isStudent(uregid, upass):
		# User Registration ID and User Password
		try:
			student = models.StudentLog.objects.get(regid=uregid)
			return HashPass.isValid(upass, student.password, student.hashrand)
		except ObjectDoesNotExist as e:
			return False

	def isTeacher(uemail, upass):
		try:
			teacher = models.TeacherLog.objects.get(email=uemail)
			return HashPass.isValid(upass, teacher.password, teacher.hashrand)
		except ObjectDoesNotExist as e:
			return False




from django.core.files.storage import FileSystemStorage as FSS
from io import BytesIO
from PIL import Image as ImageProcess
from time import time
from os import remove, makedirs
from os.path import isdir

class Image():
	"""
		storing display images of profiles. 
		root location : data/
	"""
	def save(user, bytesdata):
		"""
			to save user display image
			>>helper.Image.save(Student object, image bytes file)
			>>helper.Image.save(Teacher object, image bytes file)
			User Type:
				0 = Student
				1 = Teacher
			this image will save in : 
			students: /data/students/batch/regid/image.jpg
			teachers: /data/teachers/hid/image.jpg
			# here hid = 8 length hash code generated by teacher email id

			to show the image on html templates: <img src="/{{ user.imgsrc }}">

			image will rename with current millisecond.type

		"""
		if type(user) == models.Student:
			img,ext = Image.process(bytesdata)
			# save the image
			loc = 'data/students/'+user.batch+'/'+user.regid
			f = FSS(location = loc)


			filename = str(int(time()*1000000))
			filename = filename+'.'+ext

			# make sure the dir already exist or not
			if isdir(f.location) == False:
				makedirs(f.location)


			# if a previous image is available then delete the previous one first
			if len(user.imgsrc) != 0:
				remove(user.imgsrc)

			# save in storage 
			img.save(f.location+'/'+filename, format=ext, quality=90)

			# set the location in model
			user.imgsrc =loc+'/'+filename
			# to show the image in templete use:
			#	<img src="/{{ user.imgsrc }}">

			# migrate the information in database
			user.save()

		elif type(user) == models.Teacher:
			img,ext = Image.process(bytesdata)

			# unique folder for every teacher
			loc = 'data/teachers/'+user.hid
			f = FSS(location = loc)
			filename = str(int(time()*1000000))
			filename = filename+'.'+ext

			# make sure the dir already exist or not
			if isdir(f.location) == False:
				makedirs(f.location)


			# if previous image is available then delete the previous one first
			if len(user.imgsrc) != 0:
				remove(user.imgsrc)
			

			# save the file in storage
			img.save(f.location+'/'+filename, format=ext, quality=90)

			# set the location in model
			user.imgsrc = loc +'/'+filename

			# migrate the information in database
			user.save()

	def process(bytesdata):
		"""
			retrieve the image file from bytes and resize (1000*x)
		"""
		img = ImageProcess.open(BytesIO(bytesdata))
		size = img.size
		height = int(float(1000*size[1])/size[0])
		return img.resize((1000,height)), img.format


	def isValidFormat(filename):
		"""
			required image format: .JPG, .PNG, .JPEG
		"""
		# transform the string to lower character
		filename = filename.lower()
		# get the last dot index
		dotindex = filename.rfind('.')
		# check whether the file has any dot or extenstion
		if dotindex != -1:
			# split the file extension
			extension = filename[dotindex:len(filename)]
			# check valid extensions
			if extension == '.jpg':
				return True
			elif extension == '.png':
				return True
			elif extension == '.jpeg':
				return True
		
		return False




from json import load as jsonload, dump as jsonwrite

class Content():

	# static keys to store data and retrieve them
	keys = ["bio", "interest", "programming language", "skill", 
			"projects", "codeforeces", "uhunt", "vjudge"]

	#templete = 'data/demo.json'
	def create(regid):
		"""
		by invoke this method a json file will created for this user 
		and return the location

		"""
		batch = regid[:4]
		fol = FSS(location = 'data')
		loc = 'data/students/'+batch+'/'+regid
		with open(fol.location+'/content_demo.json', 'r') as read_file:
			data = jsonload(read_file)
			userfol = FSS(location = loc)

			with open(userfol.location+'/content.json', 'w') as write_file:
				jsonwrite(data, write_file)
				return True

		return False


	def add(regid, key, value):
		batch = regid[:4]
		fol = FSS(location='data/students/'+batch+'/'+regid)
		with open(fol.location+'/content.json', 'r') as read_file:
			data = jsonload(read_file)
			try:
				data[key].append(value)
				with open(fol.location+'/content.json', 'w') as write_file:
					jsonwrite(data, write_file)
					return True
			except KeyError as e:
				return False

		return False


	def replace(regid, key, value):
		batch = regid[:4]
		fol = FSS(location='data/students/'+batch+'/'+regid)
		with open(fol.location+'/content.json', 'r') as read_file:
			data = jsonload(read_file)
			try:
				data[key] = value
				with open(fol.location+'/content.json', 'w') as write_file:
					jsonwrite(data, write_file)
					return True
			except KeyError as e:
				return False

		return False


	def remove(regid, key, index):
		batch = regid[:4]
		fol = FSS(location='data/students/'+batch+'/'+regid)
		with open(fol.location+'/content.json', 'r') as read_file:
			data = jsonload(read_file)
			try:
				del(data[key][index])
				with open(fol.location+'/content.json', 'w') as write_file:
					jsonwrite(data, write_file)
					return True
			except KeyError as e:
				return False

		return False
