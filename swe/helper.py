
from swe import models
from django.core.exceptions import ObjectDoesNotExist


from django.core.files.storage import FileSystemStorage as FSS
from io import BytesIO
from PIL import Image as ImageProcess
from time import time
from os import remove, makedirs
from os.path import isdir

class Image():
	"""
		storing display images of profiles. 
		root location : data/
	"""
	def save(loc, bytesdata):
		"""
			this function will save an image and return the file location
			>>helper.Image.save(location, image bytes file)
			locations:
				`see` : swe.variable #storage folder locations
			# here hid = 8 length hash code generated by teacher email id

			to show the image on html templates: <img src="/{{ user.imgsrc }}">

			image will rename with current millisecond.type

		"""
		img,ext = Image.process(bytesdata)
		# save the image
		f = FSS(location = loc)


		filename = str(int(time()*1000000))
		filename = filename+'.'+ext

		# make sure the dir already exist or not
		if isdir(f.location) == False:
			makedirs(f.location)

		# save in storage 
		img.save(f.location+'/'+filename, format=ext, quality=90)

		# return the storage location
		return loc+'/'+filename


	def delete(loc):
		"""
			delete a file from storage
		"""
		try:
			remove(loc)
			return True
		except Exception as e:
			return False
	def process(bytesdata):
		"""
			retrieve the image file from bytes and resize (1000*x)
		"""
		img = ImageProcess.open(BytesIO(bytesdata))
		size = img.size
		if size[1] > 1000: 
			height = int(float(1000*size[1])/size[0])
			return img.resize((1000,height)), img.format
		return img, img.format


	def is_valid_format(filename):
		"""
			required image format: .JPG, .PNG, .JPEG
		"""
		# transform the string to lower character
		filename = filename.lower()
		# get the last dot index
		dotindex = filename.rfind('.')
		# check whether the file has any dot or extenstion
		if dotindex != -1:
			# split the file extension
			extension = filename[dotindex:len(filename)]
			# check valid extensions
			if extension == '.jpg':
				return True
			elif extension == '.png':
				return True
			elif extension == '.jpeg':
				return True
		
		return False



from hashlib import md5
class Token():
	"""
	Token class is stand for generate token according to a particular user
	and check a token validation. This is the backbone of the forget password
	functionality of this application.

	functions:
		`get_token(userid, hashed_password)`
			to generate a token with a user ID and user hashed password 
		`get_userid(token)`
			to get a user ID from a token
		`is_valid(token)`
			to check a token is valid or not
	"""
	def get_token(userid, hashed_password):
		hash_token = md5(hashed_password.encode()).hexdigest()
		return hash_token[0:16] + userid + hash_token[16:32]


	def get_userid(token):
		try:
			# remove first 16 char
			userid = token[16:len(token)]
			# remove last 16 char
			return userid[0:-16]
		except Exception as e:
			return None

	def is_valid(token):
		try:
			h1 = token[0:16]

			userid = Token.get_userid(token)

			# split last 16 chars
			h2 = token[-16:]

			encode_password = h1+h2

			try:
				user = models.AuthUser.objects.get(userid=userid)
				hashed_password = md5(user.password.encode()).hexdigest()

				if encode_password != hashed_password:
					return False
				return True
			except ObjectDoesNotExist as e:
				return False
			
		except Exception as e:
			return False



from uuid import uuid4
def new_password_request():
	return uuid4().hex
